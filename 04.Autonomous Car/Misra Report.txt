Description	Resource	Path	Location	Type
(MISRA-C:2004 1.1/R) Ensure strict ANSI C mode (-ps) is enabled	.ccsproject	/Mega_Project	line 57, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_types.h	C/C++ Problem
(MISRA-C:2004 1.1/R) Ensure strict ANSI C mode (-ps) is enabled	Button.h	/Mega_Project/HAL/Button	line 15	C/C++ Problem
(MISRA-C:2004 1.1/R) Ensure strict ANSI C mode (-ps) is enabled	std_types.h	/Mega_Project/GeneralFunctions	line 36	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 45	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 46	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 57	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 58	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 61	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 62	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 63	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 68	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 69	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 70	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 72	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 73	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 74	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 75	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 76	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 77	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 82	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 83	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 84	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 86	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 87	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 88	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 89	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 90	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 91	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 96	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 97	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 98	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 100	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 101	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 102	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 103	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 104	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 105	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 106	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 129	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 130	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 132	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 136	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 137	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 139	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 143	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 144	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 146	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 150	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 151	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	ADC.c	/Mega_Project/MCAL/ADC	line 153	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Button.c	/Mega_Project/HAL/Button	line 31	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Delay.c	/Mega_Project/GeneralFunctions	line 49	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Delay.c	/Mega_Project/GeneralFunctions	line 66	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Delay.c	/Mega_Project/GeneralFunctions	line 67	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 42	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 45	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 50	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 51	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 52	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 55	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 56	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 57	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 60	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 61	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 62	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 87	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 92	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 97	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 102	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 107	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 112	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 136	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 140	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 144	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 148	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 152	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 156	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 179	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 180	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 183	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 184	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 187	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 188	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 191	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 192	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 195	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 196	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 199	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 200	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 221	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 225	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 229	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 234	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 238	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 242	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 263	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 268	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 273	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 278	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 284	C/C++ Problem
Unused declaration of variable 'Glob_TickCounts'	tasks.c	/Mega_Project/APP	line 11	Code Analysis Problem
This project was created with a newer version of Code Composer Studio - v12.3.0. It is recommended that you upgrade to v12.3.0, or newer version of Code Composer Studio, to ensure optimal compatibility.	Mega_Project		project	Problem
(MISRA-C:2004 9.1/R) All automatic variables shall have been assigned a value before being used (variable "Local_u16temp")	tasks.c	/Mega_Project/APP	line 120	C/C++ Problem
(MISRA-C:2004 6.2/R) signed and unsigned char type shall be used only for the storage and use of numeric values	tasks.c	/Mega_Project/APP	line 139	C/C++ Problem
(MISRA-C:2004 6.2/R) signed and unsigned char type shall be used only for the storage and use of numeric values	tasks.c	/Mega_Project/APP	line 138	C/C++ Problem
(MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	tasks.c	/Mega_Project/APP	line 152	C/C++ Problem
(MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	tasks.c	/Mega_Project/APP	line 151	C/C++ Problem
(MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	tasks.c	/Mega_Project/APP	line 145	C/C++ Problem
(MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	tasks.c	/Mega_Project/APP	line 144	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	hw_gpio.h	/Mega_Project/GeneralFunctions	line 701	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Mega_Project/GeneralFunctions	line 42	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Mega_Project/GeneralFunctions	line 41	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Mega_Project/GeneralFunctions	line 40	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Mega_Project/GeneralFunctions	line 39	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Mega_Project/GeneralFunctions	line 38	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Mega_Project/GeneralFunctions	line 37	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	Bit_Math.h	/Mega_Project/GeneralFunctions	line 36	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/Mega_Project	line 55, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/Mega_Project	line 54, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/Mega_Project	line 52, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/Mega_Project	line 51, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/Mega_Project	line 50, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/Mega_Project	line 49, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/Mega_Project	line 47, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/Mega_Project	line 46, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/Mega_Project	line 45, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/Mega_Project	line 44, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.13/A) The # and ## operators should not be used	.ccsproject	/Mega_Project	line 52, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.13/A) The # and ## operators should not be used	.ccsproject	/Mega_Project	line 51, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.13/A) The # and ## operators should not be used	.ccsproject	/Mega_Project	line 47, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "Var" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 39	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "Var" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 38	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "Var" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 37	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "Var" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 36	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "VALUE" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 41	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "VALUE" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 40	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "Val" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 42	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 41	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 40	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "Offset" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 41	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "num" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 42	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "BitNo" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 42	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "BitNo" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 39	C/C++ Problem
(MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "BIT_NO" is used as an operand of # or ##.	Bit_Math.h	/Mega_Project/GeneralFunctions	line 40	C/C++ Problem
(MISRA-C:2004 19.1/A) #include statements in a file should only be preceded by other preprocessor directives or comments	Button.h	/Mega_Project/HAL/Button	line 26	C/C++ Problem
(MISRA-C:2004 16.5/R) Functions with no parameters shall be declared and defined with the parameter list void	Button.h	/Mega_Project/HAL/Button	line 28	C/C++ Problem
(MISRA-C:2004 16.5/R) Functions with no parameters shall be declared and defined with the parameter list void	Button.c	/Mega_Project/HAL/Button	line 13	C/C++ Problem
(MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	LCD.c	/Mega_Project/HAL/LCD	line 117	C/C++ Problem
(MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	LCD.c	/Mega_Project/HAL/LCD	line 96	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD.c	/Mega_Project/HAL/LCD	line 104	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	Button.c	/Mega_Project/HAL/Button	line 29	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD.c	/Mega_Project/HAL/LCD	line 127	C/C++ Problem
(MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used in operations with expressions that are not effectively Boolean	tasks.c	/Mega_Project/APP	line 85	C/C++ Problem
(MISRA-C:2004 12.5/R) The operands of a logical && or || shall be primary-expressions	tasks.c	/Mega_Project/APP	line 182	C/C++ Problem
(MISRA-C:2004 12.5/R) The operands of a logical && or || shall be primary-expressions	tasks.c	/Mega_Project/APP	line 180	C/C++ Problem
(MISRA-C:2004 12.5/R) The operands of a logical && or || shall be primary-expressions	tasks.c	/Mega_Project/APP	line 169	C/C++ Problem
(MISRA-C:2004 12.5/R) The operands of a logical && or || shall be primary-expressions	tasks.c	/Mega_Project/APP	line 61	C/C++ Problem
(MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	LCD.c	/Mega_Project/HAL/LCD	line 140	C/C++ Problem
(MISRA-C:2004 12.5/R) The operands of a logical && or || shall be primary-expressions	tasks.c	/Mega_Project/APP	line 52	C/C++ Problem
(MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	LCD.c	/Mega_Project/HAL/LCD	line 164	C/C++ Problem
(MISRA-C:2004 6.2/R) signed and unsigned char type shall be used only for the storage and use of numeric values	LCD.c	/Mega_Project/HAL/LCD	line 164	C/C++ Problem
(MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	LCD.c	/Mega_Project/HAL/LCD	line 167	C/C++ Problem
(MISRA-C:2004 16.7/A) A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object ("Copy_ptr_u8StringCopy: const uint8_t *")	LCD.c	/Mega_Project/HAL/LCD	line 169	C/C++ Problem
(MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	LCD.c	/Mega_Project/HAL/LCD	line 176	C/C++ Problem
(MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	tasks.c	/Mega_Project/APP	line 182	C/C++ Problem
(MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	tasks.c	/Mega_Project/APP	line 180	C/C++ Problem
(MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	tasks.c	/Mega_Project/APP	line 169	C/C++ Problem
(MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	tasks.c	/Mega_Project/APP	line 61	C/C++ Problem
(MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	tasks.c	/Mega_Project/APP	line 52	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	LCD.c	/Mega_Project/HAL/LCD	line 127	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	LCD.c	/Mega_Project/HAL/LCD	line 104	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	Button.c	/Mega_Project/HAL/Button	line 29	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	LCD.c	/Mega_Project/HAL/LCD	line 127	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	LCD.c	/Mega_Project/HAL/LCD	line 104	C/C++ Problem
(MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	LCD.c	/Mega_Project/HAL/LCD	line 213	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	LCD.c	/Mega_Project/HAL/LCD	line 217	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	tasks.c	/Mega_Project/APP	line 155	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	tasks.c	/Mega_Project/APP	line 125	C/C++ Problem
(MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used in operations with expressions that are not effectively Boolean	LCD.c	/Mega_Project/HAL/LCD	line 219	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	LCD.c	/Mega_Project/HAL/LCD	line 219	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	tasks.c	/Mega_Project/APP	line 122	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	tasks.c	/Mega_Project/APP	line 116	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	tasks.c	/Mega_Project/APP	line 114	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	tasks.c	/Mega_Project/APP	line 47	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	tasks.c	/Mega_Project/APP	line 45	C/C++ Problem
(MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used in operations with expressions that are not effectively Boolean	LCD.c	/Mega_Project/HAL/LCD	line 228	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	tasks.c	/Mega_Project/APP	line 39	C/C++ Problem
(MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	LCD.c	/Mega_Project/HAL/LCD	line 231	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	tasks.c	/Mega_Project/APP	line 36	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 50	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 51	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 52	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 53	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 62	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 63	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 64	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 65	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 67	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 68	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 77	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 78	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 79	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 80	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 82	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 83	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 93	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 94	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 95	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 96	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 98	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 99	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 110	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 111	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 112	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 113	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 115	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 116	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 125	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 126	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 127	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 128	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 130	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 131	C/C++ Problem
(MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	Motor.c	/Mega_Project/HAL/Motors	line 146	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 150	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 155	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Motor.c	/Mega_Project/HAL/Motors	line 49	C/C++ Problem
(MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 117	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 204	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 67	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 68	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "Ultrasonic_vidMeasureDistance")	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 71	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 72	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 83	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 85	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 203	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 192	C/C++ Problem
(MISRA-C:2004 14.3/R) Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 104	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 131	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 129	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 124	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 122	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 108	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 45	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 45	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 106	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 46	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 46	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 101	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 57	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 57	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 100	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 58	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 58	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 87	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 61	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 61	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 86	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 62	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 62	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 84	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 63	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 63	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 83	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 68	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 68	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 81	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 69	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 69	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 80	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 70	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 70	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 78	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 72	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 72	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 77	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 73	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 73	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 75	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 74	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 73	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 75	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 75	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 72	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 76	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 76	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 70	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 77	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 77	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 69	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 82	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 82	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 68	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 83	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 83	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 67	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 84	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 84	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 64	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 86	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 86	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 63	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 87	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 87	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 61	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 88	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 60	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 89	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 89	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 59	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 90	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 90	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 58	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 91	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 91	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 56	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 96	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 96	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	LCD.c	/Mega_Project/HAL/LCD	line 55	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 97	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 97	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Button.c	/Mega_Project/HAL/Button	line 23	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 98	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 98	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Button.c	/Mega_Project/HAL/Button	line 22	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 100	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 100	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Button.c	/Mega_Project/HAL/Button	line 21	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 101	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Button.c	/Mega_Project/HAL/Button	line 19	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 102	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Button.c	/Mega_Project/HAL/Button	line 18	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 103	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 103	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Button.c	/Mega_Project/HAL/Button	line 17	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 104	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 104	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Button.c	/Mega_Project/HAL/Button	line 16	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 105	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 105	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	Button.c	/Mega_Project/HAL/Button	line 15	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 106	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 106	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LCD.c	/Mega_Project/HAL/LCD	line 227	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 129	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 129	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LCD.c	/Mega_Project/HAL/LCD	line 187	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 130	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 130	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LCD.c	/Mega_Project/HAL/LCD	line 183	C/C++ Problem
(MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	ADC.c	/Mega_Project/MCAL/ADC	line 130	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 131	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LCD.c	/Mega_Project/HAL/LCD	line 127	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 132	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 132	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	LCD.c	/Mega_Project/HAL/LCD	line 104	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 136	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 136	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	Button.c	/Mega_Project/HAL/Button	line 29	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 137	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 137	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	ADC.c	/Mega_Project/MCAL/ADC	line 131	C/C++ Problem
(MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	ADC.c	/Mega_Project/MCAL/ADC	line 137	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 138	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	ADC.c	/Mega_Project/MCAL/ADC	line 138	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 139	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 139	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 209	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 143	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 143	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 204	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 144	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 144	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 203	C/C++ Problem
(MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	ADC.c	/Mega_Project/MCAL/ADC	line 144	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 145	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	ADC.c	/Mega_Project/MCAL/ADC	line 145	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 146	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 146	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 200	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 150	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 150	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 195	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 151	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 151	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 184	C/C++ Problem
(MISRA-C:2004 12.6/A) The operands of logical operators (&&, || and !) should be effectively Boolean	ADC.c	/Mega_Project/MCAL/ADC	line 151	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 152	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	ADC.c	/Mega_Project/MCAL/ADC	line 152	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	ADC.c	/Mega_Project/MCAL/ADC	line 153	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	ADC.c	/Mega_Project/MCAL/ADC	line 153	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 182	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 274	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 274	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 275	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 275	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 275	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 180	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 279	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 279	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 279	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 279	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 280	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 280	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 280	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 281	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 281	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 281	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 176	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 285	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 285	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 285	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 285	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 286	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 286	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 286	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 174	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 290	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 290	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 290	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 290	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 291	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 291	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 291	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 171	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 312	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 312	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 312	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 169	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 316	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 316	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 316	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 165	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 320	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 320	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 320	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 152	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 324	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 324	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 324	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 151	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 328	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 328	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 328	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 145	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 332	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 332	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 332	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 144	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 353	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 353	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 353	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 354	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 354	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 140	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 354	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 354	C/C++ Problem
(MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	GPIO.c	/Mega_Project/MCAL/GPIO	line 354	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 135	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 358	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 358	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 358	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 359	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 359	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 132	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 359	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 359	C/C++ Problem
(MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	GPIO.c	/Mega_Project/MCAL/GPIO	line 359	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 129	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 363	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 363	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 363	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 364	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 364	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 86	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 364	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 364	C/C++ Problem
(MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	GPIO.c	/Mega_Project/MCAL/GPIO	line 364	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 72	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 368	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 368	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 368	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 369	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 369	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 61	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 369	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 369	C/C++ Problem
(MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	GPIO.c	/Mega_Project/MCAL/GPIO	line 369	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 54	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 373	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 373	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 373	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 374	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 374	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 52	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 374	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 374	C/C++ Problem
(MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	GPIO.c	/Mega_Project/MCAL/GPIO	line 374	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 48	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 378	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 378	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 378	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 379	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 379	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 41	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 379	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 379	C/C++ Problem
(MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	GPIO.c	/Mega_Project/MCAL/GPIO	line 379	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	tasks.c	/Mega_Project/APP	line 40	C/C++ Problem
pointless comparison of unsigned integer with zero	GPIO.c	/Mega_Project/MCAL/GPIO	line 42	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 44	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 44	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 44	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 45	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 45	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 118	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 112	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 51	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 111	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 52	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 110	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 108	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 56	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 107	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 57	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 105	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 100	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 61	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	Ultrasonic.c	/Mega_Project/HAL/Ultrasonic	line 97	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 62	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 230	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 228	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 88	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 88	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 88	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 89	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 89	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 89	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 227	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 93	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 93	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 93	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 94	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 94	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 94	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 225	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 98	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 98	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 98	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 99	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 99	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 99	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 222	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 103	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 103	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 103	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 104	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 104	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 104	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 219	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 108	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 108	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 108	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 109	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 109	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 109	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 217	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 113	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 113	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 113	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 114	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 114	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 114	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 205	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 137	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 137	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 137	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 137	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 187	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 141	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 141	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 141	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 141	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 185	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 145	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 145	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 145	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 145	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 183	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 149	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 149	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 149	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 149	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 181	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 153	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 153	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 153	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 153	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 164	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 157	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 157	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 157	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 157	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 127	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 180	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 180	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	LCD.c	/Mega_Project/HAL/LCD	line 104	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 180	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 379	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 184	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 184	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 377	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 184	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 374	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 188	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 188	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 372	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 188	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 369	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 192	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 192	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 367	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 192	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 364	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 196	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 196	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 362	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 196	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 359	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 200	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 200	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 357	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 200	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 354	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 222	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 222	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 222	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 352	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 226	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 226	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 226	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 331	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 230	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 230	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 230	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 327	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 235	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 235	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 235	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 323	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 239	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 239	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 239	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 319	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 243	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 243	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 243	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 315	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 264	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 264	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 264	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 264	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 265	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 265	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 265	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 311	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 269	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 269	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 269	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPIO.c	/Mega_Project/MCAL/GPIO	line 269	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 270	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 270	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPIO.c	/Mega_Project/MCAL/GPIO	line 270	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPIO.c	/Mega_Project/MCAL/GPIO	line 289	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPIO.c	/Mega_Project/MCAL/GPIO	line 274	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPIO.c	/Mega_Project/MCAL/GPIO	line 274	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 61	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 61	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 61	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 65	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 65	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 65	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 67	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 67	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 69	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 69	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 69	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 70	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 70	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 70	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 74	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 74	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 74	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 77	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 77	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 77	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 81	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 85	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 85	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 85	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 92	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 92	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 92	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPTM.c	/Mega_Project/MCAL/GPTM	line 93	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 93	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 93	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 93	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 95	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 95	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 95	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 97	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 97	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 99	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 99	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 99	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 100	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 100	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 100	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 104	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 104	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 104	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 107	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 107	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 107	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 111	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 113	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 113	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 113	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 115	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 115	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 115	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 122	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 122	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 122	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 126	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 126	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 126	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 128	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 128	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 130	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 130	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 130	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 131	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 131	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 131	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 135	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 135	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 135	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 138	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 138	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 138	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 142	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 146	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 146	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 146	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 153	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 153	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 153	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPTM.c	/Mega_Project/MCAL/GPTM	line 154	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 154	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 154	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 154	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 156	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 156	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 156	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 158	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 158	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 160	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 160	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 160	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 161	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 161	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 161	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 165	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 165	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 165	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 168	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 168	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 168	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 172	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 174	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 174	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 174	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 176	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 176	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 176	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 184	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 184	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 184	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPTM.c	/Mega_Project/MCAL/GPTM	line 187	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 187	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 187	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 187	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 189	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 189	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 189	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 191	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 191	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 193	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 193	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 193	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 196	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 196	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 196	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 199	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 199	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 199	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 205	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 205	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 205	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/Mega_Project/MCAL/GPTM	line 205	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/Mega_Project/MCAL/GPTM	line 205	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 208	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 211	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 211	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 211	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 213	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 213	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 213	C/C++ Problem
(MISRA-C:2004 15.2/R) An unconditional break statement shall terminate every non-empty switch clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 57	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 227	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 227	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 227	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 231	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 231	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 231	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 233	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 233	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 235	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 235	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 235	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 236	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 236	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 236	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 240	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 240	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 240	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 243	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 243	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 243	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 251	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 251	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 251	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 265	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 265	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 265	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 269	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 269	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 269	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 271	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 271	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 273	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 273	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 273	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 274	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 274	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 274	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 278	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 278	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 278	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 281	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 281	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 281	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 285	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 287	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 287	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 287	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 289	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 289	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 289	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 296	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 296	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 296	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPTM.c	/Mega_Project/MCAL/GPTM	line 297	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 297	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 297	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 297	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 299	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 299	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 299	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 301	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 301	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 303	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 303	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 303	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 304	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 304	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 304	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 308	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 308	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 308	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 311	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 311	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 311	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 315	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 317	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 317	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 317	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 319	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 319	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 319	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 326	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 326	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 326	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPTM.c	/Mega_Project/MCAL/GPTM	line 328	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 328	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 328	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 328	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 330	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 330	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 330	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 332	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 332	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 334	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 334	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 334	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 335	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 335	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 335	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 339	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 339	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 339	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 342	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 342	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 342	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 346	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 348	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 348	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 348	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 350	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 350	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 350	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 357	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 357	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 357	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPTM.c	/Mega_Project/MCAL/GPTM	line 358	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 358	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 358	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 358	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 360	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 360	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 360	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 362	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 362	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 364	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 364	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 364	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 365	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 365	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 365	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 369	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 369	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 369	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 372	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 372	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 372	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 376	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 378	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 378	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 378	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 380	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 380	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 380	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	GPTM.c	/Mega_Project/MCAL/GPTM	line 388	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	GPTM.c	/Mega_Project/MCAL/GPTM	line 389	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	GPTM.c	/Mega_Project/MCAL/GPTM	line 390	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 394	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 394	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 394	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	GPTM.c	/Mega_Project/MCAL/GPTM	line 397	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 397	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 397	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 397	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 399	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 399	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 399	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 401	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 401	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 403	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 403	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 403	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 406	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 406	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 406	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 409	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 409	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 409	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 415	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 415	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 415	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	GPTM.c	/Mega_Project/MCAL/GPTM	line 415	C/C++ Problem
(MISRA-C:2004 10.5/R) If the bitwise operators ~ and << are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand	GPTM.c	/Mega_Project/MCAL/GPTM	line 415	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 419	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 419	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 419	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 422	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 422	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 422	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 425	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 425	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 425	C/C++ Problem
(MISRA-C:2004 15.2/R) An unconditional break statement shall terminate every non-empty switch clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 261	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 72	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 102	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 58	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 133	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 163	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 119	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 194	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 181	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 56	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 238	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 224	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 222	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 276	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 306	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 262	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 337	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 367	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 323	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 404	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 385	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 260	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 54	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 463	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 467	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	GPTM.c	/Mega_Project/MCAL/GPTM	line 458	C/C++ Problem
(MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	GPTM.c	/Mega_Project/MCAL/GPTM	line 474	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 476	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 476	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 476	C/C++ Problem
(MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	GPTM.c	/Mega_Project/MCAL/GPTM	line 479	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	GPTM.c	/Mega_Project/MCAL/GPTM	line 482	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	GPTM.c	/Mega_Project/MCAL/GPTM	line 482	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	GPTM.c	/Mega_Project/MCAL/GPTM	line 482	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 51	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 53	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 53	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 53	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 54	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 54	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 54	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 56	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 56	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 57	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 57	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 59	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 60	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 60	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 60	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 61	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 61	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 61	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 63	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 63	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 63	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 64	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 64	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 64	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 66	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 66	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 66	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 67	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 67	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 67	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 71	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 71	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 71	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 72	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 72	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 72	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 73	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 73	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 74	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 74	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 78	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 78	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 78	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 79	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 79	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 79	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 80	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 80	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 81	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 81	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 84	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 84	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 102	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is complex	PWM.c	/Mega_Project/MCAL/PWM	line 102	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 106	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 107	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 107	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 110	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 111	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 111	C/C++ Problem
(MISRA-C:2004 15.3/R) The final clause of a switch statement shall be the default clause	PWM.c	/Mega_Project/MCAL/PWM	line 103	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 49	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 49	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	PWM.c	/Mega_Project/MCAL/PWM	line 49	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	PWM.c	/Mega_Project/MCAL/PWM	line 51	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	PWM.c	/Mega_Project/MCAL/PWM	line 51	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 80	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 80	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	SysTick.c	/Mega_Project/MCAL/SysTick	line 80	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 81	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 81	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	SysTick.c	/Mega_Project/MCAL/SysTick	line 81	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 85	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 85	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	SysTick.c	/Mega_Project/MCAL/SysTick	line 85	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 86	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 86	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	SysTick.c	/Mega_Project/MCAL/SysTick	line 86	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	SysTick.c	/Mega_Project/MCAL/SysTick	line 86	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 105	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 105	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	SysTick.c	/Mega_Project/MCAL/SysTick	line 105	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 106	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 106	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	SysTick.c	/Mega_Project/MCAL/SysTick	line 106	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 107	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 107	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	SysTick.c	/Mega_Project/MCAL/SysTick	line 107	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 111	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 111	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	SysTick.c	/Mega_Project/MCAL/SysTick	line 111	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 112	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 112	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	SysTick.c	/Mega_Project/MCAL/SysTick	line 112	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	SysTick.c	/Mega_Project/MCAL/SysTick	line 112	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 131	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 131	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	SysTick.c	/Mega_Project/MCAL/SysTick	line 131	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 132	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 132	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	SysTick.c	/Mega_Project/MCAL/SysTick	line 132	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	SysTick.c	/Mega_Project/MCAL/SysTick	line 132	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 53	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 53	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	SysTick.c	/Mega_Project/MCAL/SysTick	line 53	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 54	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 54	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	SysTick.c	/Mega_Project/MCAL/SysTick	line 54	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 55	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 55	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	SysTick.c	/Mega_Project/MCAL/SysTick	line 55	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 59	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 59	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	SysTick.c	/Mega_Project/MCAL/SysTick	line 59	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 60	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 60	C/C++ Problem
(MISRA-C:2004 12.7/R) Bitwise operators shall not be applied to operands whose underlying type is signed	SysTick.c	/Mega_Project/MCAL/SysTick	line 60	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	SysTick.c	/Mega_Project/MCAL/SysTick	line 60	C/C++ Problem
(MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	SysTick.c	/Mega_Project/MCAL/SysTick	line 79	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	SysTick.c	/Mega_Project/MCAL/SysTick	line 79	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	SysTick.c	/Mega_Project/MCAL/SysTick	line 79	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	scheduler.c	/Mega_Project/OS	line 48	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	scheduler.c	/Mega_Project/OS	line 68	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	scheduler.c	/Mega_Project/OS	line 70	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	scheduler.c	/Mega_Project/OS	line 79	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	scheduler.c	/Mega_Project/OS	line 86	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness	scheduler.c	/Mega_Project/OS	line 88	C/C++ Problem
(MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	scheduler.c	/Mega_Project/OS	line 88	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "scheduler_start")	scheduler.c	/Mega_Project/OS	line 43	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	scheduler.c	/Mega_Project/OS	line 44	C/C++ Problem
(MISRA-C:2004 5.3/R) A typedef name shall be a unique identifier ("Task")	scheduler.c	/Mega_Project/OS	line 46	C/C++ Problem
(MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	scheduler.c	/Mega_Project/OS	line 46	C/C++ Problem
(MISRA-C:2004 8.5/R) There shall be no definitions of objects or functions in a header file	scheduler.h	/Mega_Project/OS	line 42	C/C++ Problem
(MISRA-C:2004 5.3/R) A typedef name shall be a unique identifier ("Task")	scheduler.h	/Mega_Project/OS	line 46	C/C++ Problem
(MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	main.c	/Mega_Project	line 8	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "button_scan")	main.c	/Mega_Project	line 11	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Mega_Project	line 11	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "avoid_obstacles")	main.c	/Mega_Project	line 12	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Mega_Project	line 12	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "ldr_swing_car")	main.c	/Mega_Project	line 13	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Mega_Project	line 13	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "lcd_display")	main.c	/Mega_Project	line 14	C/C++ Problem
(MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument	main.c	/Mega_Project	line 14	C/C++ Problem
(MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	main.c	/Mega_Project	line 8	C/C++ Problem
(MISRA-C:2004 11.3/A) A cast should not be performed between a pointer type and an integral type	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 73	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "ResetISR")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 75	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "NmiSR")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 76	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "FaultISR")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 77	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 78	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 79	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 80	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 85	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 86	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 88	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "STK_vidHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 89	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 90	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 91	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 92	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 93	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 94	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 95	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 96	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 97	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 98	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 99	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 100	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 101	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 102	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 103	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 104	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 105	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 106	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 107	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 108	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "TimerA0_vid_Handler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 109	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 110	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 111	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 112	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 113	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 114	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 115	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 116	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 117	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 118	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 119	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 120	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 121	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 122	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 123	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 124	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 125	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 126	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 127	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 128	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 129	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 130	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 133	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 134	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 135	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 136	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 137	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 138	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 139	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 140	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 141	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 144	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 145	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 146	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 147	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 148	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 149	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 150	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 151	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 152	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 153	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 158	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 159	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 160	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 161	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 182	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 183	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 184	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 185	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 186	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 187	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 188	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 189	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 190	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 191	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 192	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 193	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "WTimerA5_vid_Handler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 194	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 195	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 196	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 199	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 200	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 201	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 202	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 203	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 206	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 207	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 208	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 209	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 210	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 211	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 212	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 213	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 214	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 215	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 216	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 217	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 218	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 219	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 220	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 221	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 222	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 223	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 224	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 225	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 226	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 227	C/C++ Problem
(MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c123gh6pm_startup_ccs.c	/Mega_Project	line 228	C/C++ Problem
