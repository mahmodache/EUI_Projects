Description	Resource	Path	Location	Type
#1376-D (MISRA-C:2004 1.1/R) Ensure strict ANSI C mode (-ps) is enabled	.ccsproject	/StopWatch	line 57, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_types.h	C/C++ Problem
#1376-D (MISRA-C:2004 1.1/R) Ensure strict ANSI C mode (-ps) is enabled	SW_Timer.c	/StopWatch/Complex Drivers	line 9	C/C++ Problem
#1376-D (MISRA-C:2004 1.1/R) Ensure strict ANSI C mode (-ps) is enabled	StopWatch.h	/StopWatch/Application	line 43	C/C++ Problem
#1376-D (MISRA-C:2004 1.1/R) Ensure strict ANSI C mode (-ps) is enabled	std_types.h	/StopWatch/Service	line 33	C/C++ Problem
#1376-D (MISRA-C:2004 1.1/R) Ensure strict ANSI C mode (-ps) is enabled	util.h	/StopWatch/Service	line 11	C/C++ Problem
#1383-D (MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	SW_Timer.c	/StopWatch/Complex Drivers	line 9	C/C++ Problem
#1383-D (MISRA-C:2004 8.1/R) Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call	main.c	/StopWatch	line 47	C/C++ Problem
#1390-D (MISRA-C:2004 9.1/R) All automatic variables shall have been assigned a value before being used (variable "buff")	lcd.c	/StopWatch/HAL	line 231	C/C++ Problem
#1405-D (MISRA-C:2004 12.5/R) The operands of a logical && or || shall be primary-expressions	gpio.c	/StopWatch/MCAL	line 46	C/C++ Problem
#1405-D (MISRA-C:2004 12.5/R) The operands of a logical && or || shall be primary-expressions	keypad.c	/StopWatch/HAL	line 148	C/C++ Problem
#1409-D (MISRA-C:2004 12.13/A) The increment (++) and decrement (--) operators should not be mixed with other operators in an expression	util.c	/StopWatch/Service	line 18	C/C++ Problem
#1409-D (MISRA-C:2004 12.13/A) The increment (++) and decrement (--) operators should not be mixed with other operators in an expression	util.c	/StopWatch/Service	line 21	C/C++ Problem
#1409-D (MISRA-C:2004 12.13/A) The increment (++) and decrement (--) operators should not be mixed with other operators in an expression	util.c	/StopWatch/Service	line 30	C/C++ Problem
#1409-D (MISRA-C:2004 12.13/A) The increment (++) and decrement (--) operators should not be mixed with other operators in an expression	util.c	/StopWatch/Service	line 41	C/C++ Problem
#1410-D (MISRA-C:2004 13.1/R) Assignment operators shall not be used in expressions that yield a Boolean value	util.c	/StopWatch/Service	line 14	C/C++ Problem
#1410-D (MISRA-C:2004 13.1/R) Assignment operators shall not be used in expressions that yield a Boolean value	util.c	/StopWatch/Service	line 19	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "FaultISR")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 76	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "GPIOB_Handler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 90	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "GPIOF_Handler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 119	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 77	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 78	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 79	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 84	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 85	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 87	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 89	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 91	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 92	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 93	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 94	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 95	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 96	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 97	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 98	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 99	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 100	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 101	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 102	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 103	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 104	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 105	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 106	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 107	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 108	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 109	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 110	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 111	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 112	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 113	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 114	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 115	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 116	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 117	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 118	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 120	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 121	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 122	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 123	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 124	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 125	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 126	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 127	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 128	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 129	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 132	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 133	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 134	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 135	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 136	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 137	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 138	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 139	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 140	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 143	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 144	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 145	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 146	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 147	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 148	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 149	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 150	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 151	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 152	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 157	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 158	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 159	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 160	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 181	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 182	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 183	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 184	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 185	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 186	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 187	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 188	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 189	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 190	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 191	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 192	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 193	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	lcd.h	/StopWatch/HAL	line 122	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	lcd.c	/StopWatch/HAL	line 228	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	SW_Timer.c	/StopWatch/Complex Drivers	line 11	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	SW_Timer.c	/StopWatch/Complex Drivers	line 9	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 178	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 183	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 188	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 193	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	GPTM.c	/StopWatch/MCAL	line 37	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	GPTM.c	/StopWatch/MCAL	line 40	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	GPTM.c	/StopWatch/MCAL	line 41	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	GPTM.c	/StopWatch/MCAL	line 42	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	GPTM.c	/StopWatch/MCAL	line 43	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	GPTM.c	/StopWatch/MCAL	line 44	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	GPTM.c	/StopWatch/MCAL	line 46	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	GPTM.c	/StopWatch/MCAL	line 47	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 173	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	STK_prog.c	/StopWatch/MCAL	line 65	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 168	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	STK_prog.c	/StopWatch/MCAL	line 69	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 154	C/C++ Problem
#1499-D (MISRA-C:2004 8.8/R) An external object or function shall be declared in one and only one file	STK_prog.c	/StopWatch/MCAL	line 12	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	STK_prog.c	/StopWatch/MCAL	line 29	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	STK_prog.c	/StopWatch/MCAL	line 39	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 149	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	STK_prog.c	/StopWatch/MCAL	line 40	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 144	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 139	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 134	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	STK_prog.c	/StopWatch/MCAL	line 41	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 129	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	STK_prog.c	/StopWatch/MCAL	line 42	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 112	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	STK_prog.c	/StopWatch/MCAL	line 43	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 111	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	STK_prog.c	/StopWatch/MCAL	line 44	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 110	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 109	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	STK_prog.c	/StopWatch/MCAL	line 51	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 108	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	STK_prog.c	/StopWatch/MCAL	line 57	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 107	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 217	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 221	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 227	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 231	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 264	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 274	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 284	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 294	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 304	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 314	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 354	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 355	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 358	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 359	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 362	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 363	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 366	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 367	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 370	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 371	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 374	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 375	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 406	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 409	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 412	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 415	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 418	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 421	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 106	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 452	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 455	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 458	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 461	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 464	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 467	C/C++ Problem
#1499-D (MISRA-C:2004 8.8/R) An external object or function shall be declared in one and only one file	gpio.c	/StopWatch/MCAL	line 34	C/C++ Problem
#1499-D (MISRA-C:2004 8.8/R) An external object or function shall be declared in one and only one file	gpio.c	/StopWatch/MCAL	line 35	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 40	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 100	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 99	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 48	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 49	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 76	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 79	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 83	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 87	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 90	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 95	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 96	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 101	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 104	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 108	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 112	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 115	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 119	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 123	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 126	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 130	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 134	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 137	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 141	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 142	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 177	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 181	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 187	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 191	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 197	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 201	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 207	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	gpio.c	/StopWatch/MCAL	line 211	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 98	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 97	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 96	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 95	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 94	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 89	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 88	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 87	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 86	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 85	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 84	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 83	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 79	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 78	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 77	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 76	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 75	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 74	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 73	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 68	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 67	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 66	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 65	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 64	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 63	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 62	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 57	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 56	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	util.c	/StopWatch/Service	line 27	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 55	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	util.c	/StopWatch/Service	line 29	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 54	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 53	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	util.c	/StopWatch/Service	line 38	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 52	C/C++ Problem
#1500-D (MISRA-C:2004 12.10/R) The comma operator shall not be used	util.c	/StopWatch/Service	line 41	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	EXT_INTERRUPT.c	/StopWatch/MCAL	line 51	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("value")	gpio.c	/StopWatch/MCAL	line 436	C/C++ Problem
#1505-D (MISRA-C:2004 13.5/R) The three expressions of a for statement shall be concerned only with loop control	util.c	/StopWatch/Service	line 41	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	util.c	/StopWatch/Service	line 10	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	util.c	/StopWatch/Service	line 12	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("row")	keypad.c	/StopWatch/HAL	line 121	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("Reload")	STK_prog.c	/StopWatch/MCAL	line 50	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	util.h	/StopWatch/Service	line 11	C/C++ Problem
#1498-D (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types	util.h	/StopWatch/Service	line 12	C/C++ Problem
#1497-D (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")	util.c	/StopWatch/Service	line 38	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	util.c	/StopWatch/Service	line 41	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	util.c	/StopWatch/Service	line 19	C/C++ Problem
#1487-D (MISRA-C:2004 12.2/R) The value of an expression shall be the same under any order of evaluation that the standard permits	util.c	/StopWatch/Service	line 14	C/C++ Problem
#1484-D (MISRA-C:2004 6.1/R) The plain char type shall be used only for the storage and use of character values	util.c	/StopWatch/Service	line 18	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, != and ?:)	STK_prog.c	/StopWatch/MCAL	line 40	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, != and ?:)	EXT_INTERRUPT.c	/StopWatch/MCAL	line 110	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, != and ?:)	EXT_INTERRUPT.c	/StopWatch/MCAL	line 98	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, != and ?:)	EXT_INTERRUPT.c	/StopWatch/MCAL	line 87	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, != and ?:)	EXT_INTERRUPT.c	/StopWatch/MCAL	line 77	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, != and ?:)	EXT_INTERRUPT.c	/StopWatch/MCAL	line 66	C/C++ Problem
#1483-D (MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used as operands to operators other than (&&, ||, !, =, ==, != and ?:)	EXT_INTERRUPT.c	/StopWatch/MCAL	line 55	C/C++ Problem
#1482-D (MISRA-C:2004 19.13/A) The # and ## operators should not be used	.ccsproject	/StopWatch	line 52, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1482-D (MISRA-C:2004 19.13/A) The # and ## operators should not be used	.ccsproject	/StopWatch	line 51, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1482-D (MISRA-C:2004 19.13/A) The # and ## operators should not be used	.ccsproject	/StopWatch	line 47, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	util.c	/StopWatch/Service	line 30	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	lcd.c	/StopWatch/HAL	line 172	C/C++ Problem
#1476-D (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic	lcd.c	/StopWatch/HAL	line 170	C/C++ Problem
#1473-D (MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical	EXT_INTERRUPT.c	/StopWatch/MCAL	line 46	C/C++ Problem
#1472-D (MISRA-C:2004 16.3/R) Identifiers shall be given for all of the parameters in a function prototype declaration	util.h	/StopWatch/Service	line 12	C/C++ Problem
#1470-D (MISRA-C:2004 14.9/R) An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement	util.c	/StopWatch/Service	line 21	C/C++ Problem
#1470-D (MISRA-C:2004 14.9/R) An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement	util.c	/StopWatch/Service	line 15	C/C++ Problem
#1470-D (MISRA-C:2004 14.9/R) An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement	STK_prog.c	/StopWatch/MCAL	line 56	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	keypad.c	/StopWatch/HAL	line 153	C/C++ Problem
#1468-D (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function	keypad.c	/StopWatch/HAL	line 109	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	STK_prog.c	/StopWatch/MCAL	line 69	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	STK_prog.c	/StopWatch/MCAL	line 65	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	STK_prog.c	/StopWatch/MCAL	line 57	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	STK_prog.c	/StopWatch/MCAL	line 51	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	STK_prog.c	/StopWatch/MCAL	line 44	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	STK_prog.c	/StopWatch/MCAL	line 43	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	STK_prog.c	/StopWatch/MCAL	line 42	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	STK_prog.c	/StopWatch/MCAL	line 41	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	STK_prog.c	/StopWatch/MCAL	line 40	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	STK_prog.c	/StopWatch/MCAL	line 39	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	EXT_INTERRUPT.c	/StopWatch/MCAL	line 112	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	EXT_INTERRUPT.c	/StopWatch/MCAL	line 110	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	EXT_INTERRUPT.c	/StopWatch/MCAL	line 100	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	EXT_INTERRUPT.c	/StopWatch/MCAL	line 98	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	EXT_INTERRUPT.c	/StopWatch/MCAL	line 89	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	EXT_INTERRUPT.c	/StopWatch/MCAL	line 87	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	EXT_INTERRUPT.c	/StopWatch/MCAL	line 79	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	EXT_INTERRUPT.c	/StopWatch/MCAL	line 77	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	EXT_INTERRUPT.c	/StopWatch/MCAL	line 68	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	EXT_INTERRUPT.c	/StopWatch/MCAL	line 66	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	EXT_INTERRUPT.c	/StopWatch/MCAL	line 57	C/C++ Problem
#1464-D (MISRA-C:2004 10.6/R) A "U" suffix shall be applied to all constants of unsigned type	EXT_INTERRUPT.c	/StopWatch/MCAL	line 55	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	util.c	/StopWatch/Service	line 18	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	keypad.c	/StopWatch/HAL	line 148	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	gpio.c	/StopWatch/MCAL	line 46	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	STK_prog.c	/StopWatch/MCAL	line 40	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	EXT_INTERRUPT.c	/StopWatch/MCAL	line 110	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	EXT_INTERRUPT.c	/StopWatch/MCAL	line 98	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	EXT_INTERRUPT.c	/StopWatch/MCAL	line 87	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	EXT_INTERRUPT.c	/StopWatch/MCAL	line 77	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	EXT_INTERRUPT.c	/StopWatch/MCAL	line 66	C/C++ Problem
#1459-D (MISRA-C:2004 12.1/A) Limited dependence should be placed on C's operator precedence rules in expressions	EXT_INTERRUPT.c	/StopWatch/MCAL	line 55	C/C++ Problem
#1437-D (MISRA-C:2004 20.2/R) The names of standard library macros, objects and functions shall not be reused ("strlen")	util.h	/StopWatch/Service	line 12	C/C++ Problem
#1437-D (MISRA-C:2004 20.2/R) The names of standard library macros, objects and functions shall not be reused ("strlen")	util.c	/StopWatch/Service	line 27	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	common_macros.h	/StopWatch/Service	line 52	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	common_macros.h	/StopWatch/Service	line 50	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	common_macros.h	/StopWatch/Service	line 47	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	common_macros.h	/StopWatch/Service	line 44	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	common_macros.h	/StopWatch/Service	line 41	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	common_macros.h	/StopWatch/Service	line 38	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	common_macros.h	/StopWatch/Service	line 35	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "REG" is used as an operand of # or ##.	common_macros.h	/StopWatch/Service	line 32	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "num" is used as an operand of # or ##.	common_macros.h	/StopWatch/Service	line 44	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "num" is used as an operand of # or ##.	common_macros.h	/StopWatch/Service	line 41	C/C++ Problem
#1430-D (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "BIT" is used as an operand of # or ##.	common_macros.h	/StopWatch/Service	line 52	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	common_macros.h	/StopWatch/Service	line 52	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	common_macros.h	/StopWatch/Service	line 50	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	common_macros.h	/StopWatch/Service	line 47	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	common_macros.h	/StopWatch/Service	line 44	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	common_macros.h	/StopWatch/Service	line 41	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	common_macros.h	/StopWatch/Service	line 38	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	common_macros.h	/StopWatch/Service	line 35	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	common_macros.h	/StopWatch/Service	line 32	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/StopWatch	line 55, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/StopWatch	line 54, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/StopWatch	line 52, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/StopWatch	line 51, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/StopWatch	line 50, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/StopWatch	line 49, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/StopWatch	line 47, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/StopWatch	line 46, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/StopWatch	line 45, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1428-D (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro	.ccsproject	/StopWatch	line 44, external location: C:\ti\ccsv8\tools\compiler\ti-cgt-arm_18.1.4.LTS\include\machine\_stdint.h	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "SysTick_Handler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 88	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "ResetISR")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 74	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "NmiSR")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 75	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 194	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 195	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 198	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 199	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 200	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 201	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 202	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 205	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 206	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 207	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 208	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 209	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 210	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 211	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 212	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 213	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 214	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 215	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 216	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 217	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 218	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 219	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 220	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 221	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 222	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 223	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 224	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 225	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 226	C/C++ Problem
#1422-D (MISRA-C:2004 16.9/R) A function identifier shall only be used with either a preceding &, or with a parenthesised parameter list, which may be empty (function "IntDefaultHandler")	tm4c1231h6pm_startup_ccs.c	/StopWatch	line 227	C/C++ Problem
